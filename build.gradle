plugins {
    id "java"
    id "war"
    id "application"
    id "com.google.protobuf" version "0.8.17"
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    // ------------------------------- GSON ---------------------------------------
    implementation 'com.google.code.gson:gson:2.8.9'
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    // ------------------------------ PROTO ---------------------------------------
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.21.12'
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.25.0'
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    // ------------------------------ REST ---------------------------------------
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.35'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.35'
    implementation 'org.glassfish.jersey.core:jersey-server:2.35'
    implementation 'org.glassfish.jersey.core:jersey-client:2.35'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.35'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.2'
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    // ------------------------------ MQTT ---------------------------------------
    implementation group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.2.5'
    // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.12'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.25.0'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/java/proto'
        }
        java {
            srcDirs 'generated/main/java'
        }
    }
}

test {
    useJUnitPlatform()
}
